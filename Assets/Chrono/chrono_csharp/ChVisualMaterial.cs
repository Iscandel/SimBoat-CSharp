//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVisualMaterial : ChAsset {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChVisualMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChVisualMaterial_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVisualMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChVisualMaterial(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChVisualMaterial() : this(corePINVOKE.new_ChVisualMaterial(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAmbientColor(ChVectorF rgb) {
    corePINVOKE.ChVisualMaterial_SetAmbientColor(swigCPtr, ChVectorF.getCPtr(rgb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDiffuseColor(ChVectorF rgb) {
    corePINVOKE.ChVisualMaterial_SetDiffuseColor(swigCPtr, ChVectorF.getCPtr(rgb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpecularColor(ChVectorF rgb) {
    corePINVOKE.ChVisualMaterial_SetSpecularColor(swigCPtr, ChVectorF.getCPtr(rgb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpecularExponent(float exponent) {
    corePINVOKE.ChVisualMaterial_SetSpecularExponent(swigCPtr, exponent);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransparency(float tr) {
    corePINVOKE.ChVisualMaterial_SetTransparency(swigCPtr, tr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKdTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetKdTexture(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKsTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetKsTexture(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNormalMapTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetNormalMapTexture(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMetallicTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetMetallicTexture(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoughnessTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetRoughnessTexture(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOpacityTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetOpacityTexture(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFresnelExp(float exp) {
    corePINVOKE.ChVisualMaterial_SetFresnelExp(swigCPtr, exp);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFresnelMax(float max) {
    corePINVOKE.ChVisualMaterial_SetFresnelMax(swigCPtr, max);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFresnelMin(float min) {
    corePINVOKE.ChVisualMaterial_SetFresnelMin(swigCPtr, min);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoughness(float r) {
    corePINVOKE.ChVisualMaterial_SetRoughness(swigCPtr, r);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMetallic(float m) {
    corePINVOKE.ChVisualMaterial_SetMetallic(swigCPtr, m);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUseSpecularWorkflow(bool s) {
    corePINVOKE.ChVisualMaterial_SetUseSpecularWorkflow(swigCPtr, s);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetClassID(ushort id) {
    corePINVOKE.ChVisualMaterial_SetClassID(swigCPtr, id);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInstanceID(ushort id) {
    corePINVOKE.ChVisualMaterial_SetInstanceID(swigCPtr, id);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorF GetAmbientColor() {
    ChVectorF ret = new ChVectorF(corePINVOKE.ChVisualMaterial_GetAmbientColor(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorF GetDiffuseColor() {
    ChVectorF ret = new ChVectorF(corePINVOKE.ChVisualMaterial_GetDiffuseColor(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorF GetSpecularColor() {
    ChVectorF ret = new ChVectorF(corePINVOKE.ChVisualMaterial_GetSpecularColor(swigCPtr), true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetSpecularExponent() {
    float ret = corePINVOKE.ChVisualMaterial_GetSpecularExponent(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetTransparency() {
    float ret = corePINVOKE.ChVisualMaterial_GetTransparency(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetKdTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetKdTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetKsTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetKsTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetNormalMapTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetNormalMapTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetMetallicTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetMetallicTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetRoughnessTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetRoughnessTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetOpacityTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetOpacityTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetFresnelExp() {
    float ret = corePINVOKE.ChVisualMaterial_GetFresnelExp(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetFresnelMax() {
    float ret = corePINVOKE.ChVisualMaterial_GetFresnelMax(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetFresnelMin() {
    float ret = corePINVOKE.ChVisualMaterial_GetFresnelMin(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetRoughness() {
    float ret = corePINVOKE.ChVisualMaterial_GetRoughness(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetMetallic() {
    float ret = corePINVOKE.ChVisualMaterial_GetMetallic(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetUseSpecularWorkflow() {
    bool ret = corePINVOKE.ChVisualMaterial_GetUseSpecularWorkflow(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort GetClassID() {
    ushort ret = corePINVOKE.ChVisualMaterial_GetClassID(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort GetInstanceID() {
    ushort ret = corePINVOKE.ChVisualMaterial_GetInstanceID(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
